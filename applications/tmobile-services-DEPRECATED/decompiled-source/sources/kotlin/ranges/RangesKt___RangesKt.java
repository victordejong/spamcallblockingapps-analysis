package kotlin.ranges;

import com.google.firebase.analytics.FirebaseAnalytics;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntProgression;
import org.jetbrains.annotations.NotNull;
/* JADX INFO: Access modifiers changed from: package-private */
@Metadata(bv = {1, 0, 3}, d1 = {"��~\n\u0002\u0010\u000f\n\u0002\b\u0004\n\u0002\u0010\u0005\n��\n\u0002\u0010\u0006\n��\n\u0002\u0010\u0007\n��\n\u0002\u0010\b\n��\n\u0002\u0010\t\n��\n\u0002\u0010\n\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0010\f\n��\n\u0002\u0010\u000b\n\u0002\b\u000f\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u000f\n\u0002\u0018\u0002\n\u0002\b9\u001a)\u0010\u0003\u001a\u00028��\"\u000e\b��\u0010\u0001*\b\u0012\u0004\u0012\u00028��0��*\u00028��2\u0006\u0010\u0002\u001a\u00028��¢\u0006\u0004\b\u0003\u0010\u0004\u001a\u0019\u0010\u0003\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\u0002\u001a\u00020\u0005¢\u0006\u0004\b\u0003\u0010\u0006\u001a\u0019\u0010\u0003\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\u0002\u001a\u00020\u0007¢\u0006\u0004\b\u0003\u0010\b\u001a\u0019\u0010\u0003\u001a\u00020\t*\u00020\t2\u0006\u0010\u0002\u001a\u00020\t¢\u0006\u0004\b\u0003\u0010\n\u001a\u0019\u0010\u0003\u001a\u00020\u000b*\u00020\u000b2\u0006\u0010\u0002\u001a\u00020\u000b¢\u0006\u0004\b\u0003\u0010\f\u001a\u0019\u0010\u0003\u001a\u00020\r*\u00020\r2\u0006\u0010\u0002\u001a\u00020\r¢\u0006\u0004\b\u0003\u0010\u000e\u001a\u0019\u0010\u0003\u001a\u00020\u000f*\u00020\u000f2\u0006\u0010\u0002\u001a\u00020\u000f¢\u0006\u0004\b\u0003\u0010\u0010\u001a)\u0010\u0012\u001a\u00028��\"\u000e\b��\u0010\u0001*\b\u0012\u0004\u0012\u00028��0��*\u00028��2\u0006\u0010\u0011\u001a\u00028��¢\u0006\u0004\b\u0012\u0010\u0004\u001a\u0019\u0010\u0012\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\u0011\u001a\u00020\u0005¢\u0006\u0004\b\u0012\u0010\u0006\u001a\u0019\u0010\u0012\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\u0011\u001a\u00020\u0007¢\u0006\u0004\b\u0012\u0010\b\u001a\u0019\u0010\u0012\u001a\u00020\t*\u00020\t2\u0006\u0010\u0011\u001a\u00020\t¢\u0006\u0004\b\u0012\u0010\n\u001a\u0019\u0010\u0012\u001a\u00020\u000b*\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b¢\u0006\u0004\b\u0012\u0010\f\u001a\u0019\u0010\u0012\u001a\u00020\r*\u00020\r2\u0006\u0010\u0011\u001a\u00020\r¢\u0006\u0004\b\u0012\u0010\u000e\u001a\u0019\u0010\u0012\u001a\u00020\u000f*\u00020\u000f2\u0006\u0010\u0011\u001a\u00020\u000f¢\u0006\u0004\b\u0012\u0010\u0010\u001a5\u0010\u0013\u001a\u00028��\"\u000e\b��\u0010\u0001*\b\u0012\u0004\u0012\u00028��0��*\u00028��2\b\u0010\u0002\u001a\u0004\u0018\u00018��2\b\u0010\u0011\u001a\u0004\u0018\u00018��¢\u0006\u0004\b\u0013\u0010\u0014\u001a1\u0010\u0013\u001a\u00028��\"\u000e\b��\u0010\u0001*\b\u0012\u0004\u0012\u00028��0��*\u00028��2\f\u0010\u0016\u001a\b\u0012\u0004\u0012\u00028��0\u0015H\u0007¢\u0006\u0004\b\u0013\u0010\u0017\u001a/\u0010\u0013\u001a\u00028��\"\u000e\b��\u0010\u0001*\b\u0012\u0004\u0012\u00028��0��*\u00028��2\f\u0010\u0016\u001a\b\u0012\u0004\u0012\u00028��0\u0018¢\u0006\u0004\b\u0013\u0010\u0019\u001a!\u0010\u0013\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\u0002\u001a\u00020\u00052\u0006\u0010\u0011\u001a\u00020\u0005¢\u0006\u0004\b\u0013\u0010\u001a\u001a!\u0010\u0013\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\u0002\u001a\u00020\u00072\u0006\u0010\u0011\u001a\u00020\u0007¢\u0006\u0004\b\u0013\u0010\u001b\u001a!\u0010\u0013\u001a\u00020\t*\u00020\t2\u0006\u0010\u0002\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\t¢\u0006\u0004\b\u0013\u0010\u001c\u001a!\u0010\u0013\u001a\u00020\u000b*\u00020\u000b2\u0006\u0010\u0002\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b¢\u0006\u0004\b\u0013\u0010\u001d\u001a\u001f\u0010\u0013\u001a\u00020\u000b*\u00020\u000b2\f\u0010\u0016\u001a\b\u0012\u0004\u0012\u00020\u000b0\u0018¢\u0006\u0004\b\u0013\u0010\u001e\u001a!\u0010\u0013\u001a\u00020\r*\u00020\r2\u0006\u0010\u0002\u001a\u00020\r2\u0006\u0010\u0011\u001a\u00020\r¢\u0006\u0004\b\u0013\u0010\u001f\u001a\u001f\u0010\u0013\u001a\u00020\r*\u00020\r2\f\u0010\u0016\u001a\b\u0012\u0004\u0012\u00020\r0\u0018¢\u0006\u0004\b\u0013\u0010 \u001a!\u0010\u0013\u001a\u00020\u000f*\u00020\u000f2\u0006\u0010\u0002\u001a\u00020\u000f2\u0006\u0010\u0011\u001a\u00020\u000f¢\u0006\u0004\b\u0013\u0010!\u001a\u001e\u0010&\u001a\u00020%*\u00020\"2\b\u0010$\u001a\u0004\u0018\u00010#H\u0087\n¢\u0006\u0004\b&\u0010'\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00050\u00182\u0006\u0010(\u001a\u00020\u0007H\u0087\u0002¢\u0006\u0004\b)\u0010*\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00050\u00182\u0006\u0010(\u001a\u00020\tH\u0087\u0002¢\u0006\u0004\b)\u0010+\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00050\u00182\u0006\u0010(\u001a\u00020\u000bH\u0087\u0002¢\u0006\u0004\b)\u0010,\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00050\u00182\u0006\u0010(\u001a\u00020\rH\u0087\u0002¢\u0006\u0004\b)\u0010-\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00050\u00182\u0006\u0010(\u001a\u00020\u000fH\u0087\u0002¢\u0006\u0004\b)\u0010.\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00070\u00182\u0006\u0010(\u001a\u00020\u0005H\u0087\u0002¢\u0006\u0004\b/\u00100\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00070\u00182\u0006\u0010(\u001a\u00020\tH\u0087\u0002¢\u0006\u0004\b/\u0010+\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00070\u00182\u0006\u0010(\u001a\u00020\u000bH\u0087\u0002¢\u0006\u0004\b/\u0010,\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00070\u00182\u0006\u0010(\u001a\u00020\rH\u0087\u0002¢\u0006\u0004\b/\u0010-\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u00070\u00182\u0006\u0010(\u001a\u00020\u000fH\u0087\u0002¢\u0006\u0004\b/\u0010.\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\t0\u00182\u0006\u0010(\u001a\u00020\u0005H\u0087\u0002¢\u0006\u0004\b1\u00100\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\t0\u00182\u0006\u0010(\u001a\u00020\u0007H\u0087\u0002¢\u0006\u0004\b1\u0010*\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\t0\u00182\u0006\u0010(\u001a\u00020\u000bH\u0087\u0002¢\u0006\u0004\b1\u0010,\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\t0\u00182\u0006\u0010(\u001a\u00020\rH\u0087\u0002¢\u0006\u0004\b1\u0010-\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\t0\u00182\u0006\u0010(\u001a\u00020\u000fH\u0087\u0002¢\u0006\u0004\b1\u0010.\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000b0\u00182\u0006\u0010(\u001a\u00020\u0005H\u0087\u0002¢\u0006\u0004\b2\u00100\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000b0\u00182\u0006\u0010(\u001a\u00020\u0007H\u0087\u0002¢\u0006\u0004\b2\u0010*\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000b0\u00182\u0006\u0010(\u001a\u00020\tH\u0087\u0002¢\u0006\u0004\b2\u0010+\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000b0\u00182\u0006\u0010(\u001a\u00020\rH\u0087\u0002¢\u0006\u0004\b2\u0010-\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000b0\u00182\u0006\u0010(\u001a\u00020\u000fH\u0087\u0002¢\u0006\u0004\b2\u0010.\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\r0\u00182\u0006\u0010(\u001a\u00020\u0005H\u0087\u0002¢\u0006\u0004\b3\u00100\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\r0\u00182\u0006\u0010(\u001a\u00020\u0007H\u0087\u0002¢\u0006\u0004\b3\u0010*\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\r0\u00182\u0006\u0010(\u001a\u00020\tH\u0087\u0002¢\u0006\u0004\b3\u0010+\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\r0\u00182\u0006\u0010(\u001a\u00020\u000bH\u0087\u0002¢\u0006\u0004\b3\u0010,\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\r0\u00182\u0006\u0010(\u001a\u00020\u000fH\u0087\u0002¢\u0006\u0004\b3\u0010.\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000f0\u00182\u0006\u0010(\u001a\u00020\u0005H\u0087\u0002¢\u0006\u0004\b4\u00100\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000f0\u00182\u0006\u0010(\u001a\u00020\u0007H\u0087\u0002¢\u0006\u0004\b4\u0010*\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000f0\u00182\u0006\u0010(\u001a\u00020\tH\u0087\u0002¢\u0006\u0004\b4\u0010+\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000f0\u00182\u0006\u0010(\u001a\u00020\u000bH\u0087\u0002¢\u0006\u0004\b4\u0010,\u001a\"\u0010&\u001a\u00020%*\b\u0012\u0004\u0012\u00020\u000f0\u00182\u0006\u0010(\u001a\u00020\rH\u0087\u0002¢\u0006\u0004\b4\u0010-\u001a\u001e\u0010&\u001a\u00020%*\u0002052\b\u0010$\u001a\u0004\u0018\u00010\u000bH\u0087\n¢\u0006\u0004\b&\u00106\u001a\u001e\u0010&\u001a\u00020%*\u0002072\b\u0010$\u001a\u0004\u0018\u00010\rH\u0087\n¢\u0006\u0004\b&\u00108\u001a\u001c\u0010;\u001a\u00020:*\u00020\u00052\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\b;\u0010<\u001a\u001c\u0010;\u001a\u00020:*\u00020\u00052\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\b;\u0010=\u001a\u001c\u0010;\u001a\u00020>*\u00020\u00052\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\b;\u0010?\u001a\u001c\u0010;\u001a\u00020:*\u00020\u00052\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0004\b;\u0010@\u001a\u001c\u0010;\u001a\u00020A*\u00020#2\u0006\u00109\u001a\u00020#H\u0086\u0004¢\u0006\u0004\b;\u0010B\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000b2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\b;\u0010C\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000b2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\b;\u0010D\u001a\u001c\u0010;\u001a\u00020>*\u00020\u000b2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\b;\u0010E\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000b2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0004\b;\u0010F\u001a\u001c\u0010;\u001a\u00020>*\u00020\r2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\b;\u0010G\u001a\u001c\u0010;\u001a\u00020>*\u00020\r2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\b;\u0010H\u001a\u001c\u0010;\u001a\u00020>*\u00020\r2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\b;\u0010I\u001a\u001c\u0010;\u001a\u00020>*\u00020\r2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0004\b;\u0010J\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000f2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\b;\u0010K\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000f2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\b;\u0010L\u001a\u001c\u0010;\u001a\u00020>*\u00020\u000f2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\b;\u0010M\u001a\u001c\u0010;\u001a\u00020:*\u00020\u000f2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0004\b;\u0010N\u001a\u0014\u0010O\u001a\u00020#*\u00020\"H\u0087\b¢\u0006\u0004\bO\u0010P\u001a\u001b\u0010O\u001a\u00020#*\u00020\"2\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bO\u0010R\u001a\u0014\u0010O\u001a\u00020\u000b*\u000205H\u0087\b¢\u0006\u0004\bO\u0010S\u001a\u001b\u0010O\u001a\u00020\u000b*\u0002052\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bO\u0010T\u001a\u0014\u0010O\u001a\u00020\r*\u000207H\u0087\b¢\u0006\u0004\bO\u0010U\u001a\u001b\u0010O\u001a\u00020\r*\u0002072\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bO\u0010V\u001a\u0016\u0010W\u001a\u0004\u0018\u00010#*\u00020\"H\u0087\b¢\u0006\u0004\bW\u0010X\u001a\u001d\u0010W\u001a\u0004\u0018\u00010#*\u00020\"2\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bW\u0010Y\u001a\u0016\u0010W\u001a\u0004\u0018\u00010\u000b*\u000205H\u0087\b¢\u0006\u0004\bW\u0010Z\u001a\u001d\u0010W\u001a\u0004\u0018\u00010\u000b*\u0002052\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bW\u0010[\u001a\u0016\u0010W\u001a\u0004\u0018\u00010\r*\u000207H\u0087\b¢\u0006\u0004\bW\u0010\\\u001a\u001d\u0010W\u001a\u0004\u0018\u00010\r*\u0002072\u0006\u0010O\u001a\u00020QH\u0007¢\u0006\u0004\bW\u0010]\u001a\u0011\u0010^\u001a\u00020A*\u00020A¢\u0006\u0004\b^\u0010_\u001a\u0011\u0010^\u001a\u00020:*\u00020:¢\u0006\u0004\b^\u0010`\u001a\u0011\u0010^\u001a\u00020>*\u00020>¢\u0006\u0004\b^\u0010a\u001a\u001c\u0010b\u001a\u00020A*\u00020A2\u0006\u0010b\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\bb\u0010c\u001a\u001c\u0010b\u001a\u00020:*\u00020:2\u0006\u0010b\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\bb\u0010d\u001a\u001c\u0010b\u001a\u00020>*\u00020>2\u0006\u0010b\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\bb\u0010e\u001a\u0015\u0010f\u001a\u0004\u0018\u00010\u0005*\u00020\u0007H��¢\u0006\u0004\bf\u0010g\u001a\u0015\u0010f\u001a\u0004\u0018\u00010\u0005*\u00020\tH��¢\u0006\u0004\bf\u0010h\u001a\u0015\u0010f\u001a\u0004\u0018\u00010\u0005*\u00020\u000bH��¢\u0006\u0004\bf\u0010i\u001a\u0015\u0010f\u001a\u0004\u0018\u00010\u0005*\u00020\rH��¢\u0006\u0004\bf\u0010j\u001a\u0015\u0010f\u001a\u0004\u0018\u00010\u0005*\u00020\u000fH��¢\u0006\u0004\bf\u0010k\u001a\u0015\u0010l\u001a\u0004\u0018\u00010\u000b*\u00020\u0007H��¢\u0006\u0004\bl\u0010m\u001a\u0015\u0010l\u001a\u0004\u0018\u00010\u000b*\u00020\tH��¢\u0006\u0004\bl\u0010n\u001a\u0015\u0010l\u001a\u0004\u0018\u00010\u000b*\u00020\rH��¢\u0006\u0004\bl\u0010o\u001a\u0015\u0010p\u001a\u0004\u0018\u00010\r*\u00020\u0007H��¢\u0006\u0004\bp\u0010q\u001a\u0015\u0010p\u001a\u0004\u0018\u00010\r*\u00020\tH��¢\u0006\u0004\bp\u0010r\u001a\u0015\u0010s\u001a\u0004\u0018\u00010\u000f*\u00020\u0007H��¢\u0006\u0004\bs\u0010t\u001a\u0015\u0010s\u001a\u0004\u0018\u00010\u000f*\u00020\tH��¢\u0006\u0004\bs\u0010u\u001a\u0015\u0010s\u001a\u0004\u0018\u00010\u000f*\u00020\u000bH��¢\u0006\u0004\bs\u0010v\u001a\u0015\u0010s\u001a\u0004\u0018\u00010\u000f*\u00020\rH��¢\u0006\u0004\bs\u0010w\u001a\u001c\u0010x\u001a\u000205*\u00020\u00052\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\bx\u0010y\u001a\u001c\u0010x\u001a\u000205*\u00020\u00052\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\bx\u0010z\u001a\u001c\u0010x\u001a\u000207*\u00020\u00052\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0004\bx\u0010{\u001a\u001c\u0010x\u001a\u000205*\u00020\u00052\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0004\bx\u0010|\u001a\u001c\u0010x\u001a\u00020\"*\u00020#2\u0006\u00109\u001a\u00020#H\u0086\u0004¢\u0006\u0004\bx\u0010}\u001a\u001c\u0010x\u001a\u000205*\u00020\u000b2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0004\bx\u0010~\u001a\u001c\u0010x\u001a\u000205*\u00020\u000b2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0004\bx\u0010\u007f\u001a\u001d\u0010x\u001a\u000207*\u00020\u000b2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0005\bx\u0010\u0080\u0001\u001a\u001d\u0010x\u001a\u000205*\u00020\u000b2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0005\bx\u0010\u0081\u0001\u001a\u001d\u0010x\u001a\u000207*\u00020\r2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0005\bx\u0010\u0082\u0001\u001a\u001d\u0010x\u001a\u000207*\u00020\r2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0005\bx\u0010\u0083\u0001\u001a\u001d\u0010x\u001a\u000207*\u00020\r2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0005\bx\u0010\u0084\u0001\u001a\u001d\u0010x\u001a\u000207*\u00020\r2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0005\bx\u0010\u0085\u0001\u001a\u001d\u0010x\u001a\u000205*\u00020\u000f2\u0006\u00109\u001a\u00020\u0005H\u0086\u0004¢\u0006\u0005\bx\u0010\u0086\u0001\u001a\u001d\u0010x\u001a\u000205*\u00020\u000f2\u0006\u00109\u001a\u00020\u000bH\u0086\u0004¢\u0006\u0005\bx\u0010\u0087\u0001\u001a\u001d\u0010x\u001a\u000207*\u00020\u000f2\u0006\u00109\u001a\u00020\rH\u0086\u0004¢\u0006\u0005\bx\u0010\u0088\u0001\u001a\u001d\u0010x\u001a\u000205*\u00020\u000f2\u0006\u00109\u001a\u00020\u000fH\u0086\u0004¢\u0006\u0005\bx\u0010\u0089\u0001¨\u0006\u008a\u0001"}, d2 = {"", "T", "minimumValue", "coerceAtLeast", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;", "", "(BB)B", "", "(DD)D", "", "(FF)F", "", "(II)I", "", "(JJ)J", "", "(SS)S", "maximumValue", "coerceAtMost", "coerceIn", "(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;", "Lkotlin/ranges/ClosedFloatingPointRange;", "range", "(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;", "Lkotlin/ranges/ClosedRange;", "(Ljava/lang/Comparable;Lkotlin/ranges/ClosedRange;)Ljava/lang/Comparable;", "(BBB)B", "(DDD)D", "(FFF)F", "(III)I", "(ILkotlin/ranges/ClosedRange;)I", "(JJJ)J", "(JLkotlin/ranges/ClosedRange;)J", "(SSS)S", "Lkotlin/ranges/CharRange;", "", "element", "", "contains", "(Lkotlin/ranges/CharRange;Ljava/lang/Character;)Z", FirebaseAnalytics.Param.VALUE, "byteRangeContains", "(Lkotlin/ranges/ClosedRange;D)Z", "(Lkotlin/ranges/ClosedRange;F)Z", "(Lkotlin/ranges/ClosedRange;I)Z", "(Lkotlin/ranges/ClosedRange;J)Z", "(Lkotlin/ranges/ClosedRange;S)Z", "doubleRangeContains", "(Lkotlin/ranges/ClosedRange;B)Z", "floatRangeContains", "intRangeContains", "longRangeContains", "shortRangeContains", "Lkotlin/ranges/IntRange;", "(Lkotlin/ranges/IntRange;Ljava/lang/Integer;)Z", "Lkotlin/ranges/LongRange;", "(Lkotlin/ranges/LongRange;Ljava/lang/Long;)Z", "to", "Lkotlin/ranges/IntProgression;", "downTo", "(BB)Lkotlin/ranges/IntProgression;", "(BI)Lkotlin/ranges/IntProgression;", "Lkotlin/ranges/LongProgression;", "(BJ)Lkotlin/ranges/LongProgression;", "(BS)Lkotlin/ranges/IntProgression;", "Lkotlin/ranges/CharProgression;", "(CC)Lkotlin/ranges/CharProgression;", "(IB)Lkotlin/ranges/IntProgression;", "(II)Lkotlin/ranges/IntProgression;", "(IJ)Lkotlin/ranges/LongProgression;", "(IS)Lkotlin/ranges/IntProgression;", "(JB)Lkotlin/ranges/LongProgression;", "(JI)Lkotlin/ranges/LongProgression;", "(JJ)Lkotlin/ranges/LongProgression;", "(JS)Lkotlin/ranges/LongProgression;", "(SB)Lkotlin/ranges/IntProgression;", "(SI)Lkotlin/ranges/IntProgression;", "(SJ)Lkotlin/ranges/LongProgression;", "(SS)Lkotlin/ranges/IntProgression;", "random", "(Lkotlin/ranges/CharRange;)C", "Lkotlin/random/Random;", "(Lkotlin/ranges/CharRange;Lkotlin/random/Random;)C", "(Lkotlin/ranges/IntRange;)I", "(Lkotlin/ranges/IntRange;Lkotlin/random/Random;)I", "(Lkotlin/ranges/LongRange;)J", "(Lkotlin/ranges/LongRange;Lkotlin/random/Random;)J", "randomOrNull", "(Lkotlin/ranges/CharRange;)Ljava/lang/Character;", "(Lkotlin/ranges/CharRange;Lkotlin/random/Random;)Ljava/lang/Character;", "(Lkotlin/ranges/IntRange;)Ljava/lang/Integer;", "(Lkotlin/ranges/IntRange;Lkotlin/random/Random;)Ljava/lang/Integer;", "(Lkotlin/ranges/LongRange;)Ljava/lang/Long;", "(Lkotlin/ranges/LongRange;Lkotlin/random/Random;)Ljava/lang/Long;", "reversed", "(Lkotlin/ranges/CharProgression;)Lkotlin/ranges/CharProgression;", "(Lkotlin/ranges/IntProgression;)Lkotlin/ranges/IntProgression;", "(Lkotlin/ranges/LongProgression;)Lkotlin/ranges/LongProgression;", "step", "(Lkotlin/ranges/CharProgression;I)Lkotlin/ranges/CharProgression;", "(Lkotlin/ranges/IntProgression;I)Lkotlin/ranges/IntProgression;", "(Lkotlin/ranges/LongProgression;J)Lkotlin/ranges/LongProgression;", "toByteExactOrNull", "(D)Ljava/lang/Byte;", "(F)Ljava/lang/Byte;", "(I)Ljava/lang/Byte;", "(J)Ljava/lang/Byte;", "(S)Ljava/lang/Byte;", "toIntExactOrNull", "(D)Ljava/lang/Integer;", "(F)Ljava/lang/Integer;", "(J)Ljava/lang/Integer;", "toLongExactOrNull", "(D)Ljava/lang/Long;", "(F)Ljava/lang/Long;", "toShortExactOrNull", "(D)Ljava/lang/Short;", "(F)Ljava/lang/Short;", "(I)Ljava/lang/Short;", "(J)Ljava/lang/Short;", "until", "(BB)Lkotlin/ranges/IntRange;", "(BI)Lkotlin/ranges/IntRange;", "(BJ)Lkotlin/ranges/LongRange;", "(BS)Lkotlin/ranges/IntRange;", "(CC)Lkotlin/ranges/CharRange;", "(IB)Lkotlin/ranges/IntRange;", "(II)Lkotlin/ranges/IntRange;", "(IJ)Lkotlin/ranges/LongRange;", "(IS)Lkotlin/ranges/IntRange;", "(JB)Lkotlin/ranges/LongRange;", "(JI)Lkotlin/ranges/LongRange;", "(JJ)Lkotlin/ranges/LongRange;", "(JS)Lkotlin/ranges/LongRange;", "(SB)Lkotlin/ranges/IntRange;", "(SI)Lkotlin/ranges/IntRange;", "(SJ)Lkotlin/ranges/LongRange;", "(SS)Lkotlin/ranges/IntRange;", "kotlin-stdlib"}, k = 5, mv = {1, 1, 15}, pn = "", xi = 0, xs = "kotlin/ranges/RangesKt")
/* loaded from: classes2-dex2jar.jar:kotlin/ranges/RangesKt___RangesKt.class */
public class RangesKt___RangesKt extends RangesKt__RangesKt {
    /* renamed from: b */
    public static int m1713b(int i, int i2) {
        int i3 = i;
        if (i < i2) {
            i3 = i2;
        }
        return i3;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* renamed from: c */
    public static long m1712c(long j, long j2) {
        char c = j;
        if (j < j2) {
            c = j2;
        }
        return c;
    }

    /* renamed from: d */
    public static int m1711d(int i, int i2) {
        int i3 = i;
        if (i > i2) {
            i3 = i2;
        }
        return i3;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* renamed from: e */
    public static long m1710e(long j, long j2) {
        char c = j;
        if (j > j2) {
            c = j2;
        }
        return c;
    }

    /* renamed from: f */
    public static int m1709f(int i, int i2, int i3) {
        if (i2 <= i3) {
            return i < i2 ? i2 : i > i3 ? i3 : i;
        }
        throw new IllegalArgumentException("Cannot coerce value to an empty range: maximum " + i3 + " is less than minimum " + i2 + '.');
    }

    @NotNull
    /* renamed from: g */
    public static IntProgression m1708g(int i, int i2) {
        return IntProgression.f20794i.m1734a(i, i2, -1);
    }

    @NotNull
    /* renamed from: h */
    public static IntProgression m1707h(@NotNull IntProgression step, int i) {
        Intrinsics.m1830e(step, "$this$step");
        RangesKt__RangesKt.m1714a(i > 0, Integer.valueOf(i));
        IntProgression.Companion companion = IntProgression.f20794i;
        int f = step.m1738f();
        int g = step.m1737g();
        if (step.m1736h() <= 0) {
            i = -i;
        }
        return companion.m1734a(f, g, i);
    }

    @NotNull
    /* renamed from: i */
    public static IntRange m1706i(int i, int i2) {
        return i2 <= Integer.MIN_VALUE ? IntRange.f20803k.m1729a() : new IntRange(i, i2 - 1);
    }
}
